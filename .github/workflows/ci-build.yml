
name: CI -Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
permissions:
  contents: write  
  pull-requests: write

env:
  DOTNET_NOLOGO: true                     # Disable the .NET logo in the console output
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true # Disable the .NET first time experience to skip caching NuGet packages and speed up the build
  DOTNET_CLI_TELEMETRY_OPTOUT: true       # Disable sending .NET CLI telemetry to Microsoft

jobs:
  build:
    runs-on: ubuntu-latest
    name: CI Build
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    - name: Restore Dependencies
      run: dotnet restore src/ConsoleApp1/ConsoleApp1.sln

    - name: Build
      run: dotnet build src/ConsoleApp1/ConsoleApp1.sln --configuration Release --no-restore

    - name: Test
      run: dotnet test src/ConsoleApp1/ConsoleApp1.sln --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Copy Coverage To Predictable Location
      run: cp coverage/**/coverage.cobertura.xml coverage.cobertura.xml
    
    - name: Copy Coverage To coverage location
      run: cp coverage.cobertura.xml coverage/coverage.cobertura.xml
    
    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@5.1.9
      with:
        reports: 'coverage.cobertura.xml' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: 'coverage' # REQUIRED # The directory where the generated report should be saved.
        reporttypes: 'MHtml;MarkdownSummary;Badges;Html' # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, Html_Dark, Html_Light, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MarkdownSummary, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, Xml, XmlSummary
        sourcedirs: '' # Optional directories which contain the corresponding source code (separated by semicolon). The source directories are used if coverage report contains classes without path information.
        historydir: '' # Optional directory for storing persistent coverage information. Can be used in future reports to show coverage evolution.
        plugins: '' # Optional plugin files for custom reports or custom history storage (separated by semicolon).
        assemblyfilters: '+*' # Optional list of assemblies that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        classfilters: '+*' # Optional list of classes that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        filefilters: '+*' # Optional list of files that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        verbosity: 'Info' # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
        title: 'Code Coverage Report' # Optional title.
        tag: '${{ github.run_number }}_${{ github.run_id }}' # Optional tag or build version.
        license: '' # Optional license for PRO version. Get your license here: https://reportgenerator.io/pro
        customSettings: '' # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
        toolpath: 'reportgeneratortool' # Default directory for installing the dotnet tool.

    - name: Coverage Summary Report
      uses:  irongut/CodeCoverageSummary@v1.2.0
      with:
        filename: coverage.cobertura.xml
        badge: true
        format: 'md'
        output: 'both'
        
    - name: Copy Coverage To Predictable Location
      run: cp coverage/Summary.mht coverage/coverage_summary.mht

    - name: Upload Coverage Artifact
      uses: actions/upload-artifact@v2.3.0
      with:
        name: test-coverage-report
        path: |
          coverage.cobertura.xml
          code-coverage-results.md
          coverage
    
    - name: Copy Coverage To Predictable Location
      run: cp code-coverage-results.md coverage/README.md
      
    - name: setup python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8 #install the python needed
    - name: execute py script # run the run.py to get the latest data
      run: |
        python .github/workflows/update_readme.py .github/workflows/readme_template.md code-coverage-results.md README.md main ${GITHUB_REPOSITORY%/*}  ${GITHUB_REPOSITORY#*/} ci-build.yml
    
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
    
    - name: Sonarqube Analysis
      run: | 
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool install --global dotnet-coverage
        dotnet sonarscanner begin /k:"handymanforit_DocumentationGeneration" /o:"handymanforit" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=sonar_coverage.xml
        dotnet build src/ConsoleApp1/ConsoleApp1.sln --configuration Release
        dotnet-coverage collect 'dotnet test src/ConsoleApp1/ConsoleApp1.sln' -f xml -o 'sonar_coverage.xml'
        dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
       
    - name: add the code coverage results to main page.
      if: github.event.pusher.name!= 'System'
      run: |
        git config user.email "you@example.com"
        git config user.name "System"
        git add README.md
        git add code-coverage-results.md
        git add coverage/badge_branchcoverage.svg
        git add coverage/badge_linecoverage.svg
        git add coverage/badge_methodcoverage.svg
        git add coverage/coverage_summary.mht
        git add coverage/coverage.cobertura.xml
        git add coverage/README.md
        git commit -m 'updating coverage'
        git push
    
    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md
    - name: Upload Nuget Artifact
      uses: actions/upload-artifact@v2.3.0
      with:
        name: ci-nugets
        path: src/ConsoleApp1/bin/Release/DocGen.Docgen*.nupkg
